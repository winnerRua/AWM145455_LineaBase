using GrupoCoen.Corporativo.Libraries.ConexionBD;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using WSREGAUTHORIZER;
using WSREGAWM.Entities;
using WSREGAWM.Helpers;
using WSREGAWM.Services;
using WSREGPROXY.Helpers;
using WSREGPROXY;
using System.Data;
using WSREGPROXY.Entities;
using WSREGPROXY.Services;
using WSSoapProxy.Models;
using System.Xml.Linq;
using Newtonsoft.Json;
using System.Net;
using System.IO;

namespace WSREGAWM
{
    public class AWMCore
    {
        UtileriasProxy utiProxy = new UtileriasProxy();
        Transacciones transaccion = new Transacciones();

        dynamic responseRemesador;
        WorkFlows oWF = new WorkFlows();
        string agency_code = string.Empty;
        string sub_agent_user = string.Empty;
        string oError;

        public dynamic beginWorkflow(string Request, IConfiguration _config, string Key)
        {
            try
            {
                string respuesta = string.Empty, request = string.Empty;
                UtileriasAWM miUtilerias = new UtileriasAWM();
                ConexionBDAWM miConexionBD = new ConexionBDAWM();
                Authorizer auto = new Authorizer();
                Proxy prox = new Proxy();

                var mijObject = JObject.Parse(Request);

                oWF = miConexionBD.obtenerWorkFlow(_config, miUtilerias.encontrarValorNodo(mijObject, "operation_id"), miUtilerias.encontrarValorNodo(mijObject, "operation_product_id"), int.Parse(miUtilerias.encontrarValorNodo(mijObject, "remesador_id")));
                utiProxy.SaveLog(oWF.NombreWorkFlow, "1", Key, 1, _config);

                switch (oWF.NombreWorkFlow)
                {
                    case "SENDMONEY":
                        var send = ejecutarActividades(oWF.Operaciones, _config, Request, int.Parse(miUtilerias.encontrarValorNodo(mijObject, "remesador_id")), Key);

                        utiProxy.SaveLog(send, "1", Key, 1, _config);

                        if (oWF.ConsumeAutorizador)
                        {
                            //Consumir autorizador
                            var conAuto = auto.ConsumeAuthorizer(Request, _config, oError);
                            utiProxy.SaveLog(conAuto, "1", Key, 1, _config);
                            if (!string.IsNullOrEmpty(conAuto))
                            {
                                return conAuto;
                            }
                        }

                        if (oWF.ConsumeProxy)
                        {
                            //Consumir proxy.
                            var valProx = prox.ConsumeProxy(Request, Key, _config);
                            utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(valProx, "Fault");
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return valProx;
                            }
                        }
                        if (oWF.GuardaTransaccion)
                        {
                            string tipo = "ENVIO";
                            var ENVIO = miUtilerias.tipoTrans(Request, tipo);
                            var trans = transaccion.storeSendMoney(1, ENVIO, _config, oWF.GuardaTransaccion, Key);
                            utiProxy.SaveLog(Convert.ToString(trans), "1", Key, 1, _config);
                            return trans;
                        }
                        break;

                    case "PAYMONEY":
                        var pay = ejecutarActividades(oWF.Operaciones, _config, Request, int.Parse(miUtilerias.encontrarValorNodo(mijObject, "remesador_id")), Key);
                        utiProxy.SaveLog(pay, "1", Key, 1, _config);
                        if (oWF.ConsumeAutorizador)
                        {
                            //Consumir autorizador
                            var conAuto = auto.ConsumeAuthorizer(Request, _config, oError);
                            utiProxy.SaveLog(conAuto, "1", Key, 1, _config);
                            if (!string.IsNullOrEmpty(conAuto))
                            {
                                return conAuto;
                            }
                        }
                        if (oWF.ConsumeProxy)
                        {
                            //Consumir proxy.
                            var valProx = prox.ConsumeProxy(Request, Key, _config);
                            utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(valProx, "Fault");
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return valProx;
                            }
                        }
                        if (oWF.GuardaTransaccion)
                        {
                            string tipo = "PAGO";
                            var PAGO = miUtilerias.tipoTrans(Request, tipo);
                            var guarda = transaccion.storePayMoney(1, PAGO, _config, oWF.GuardaTransaccion, Key);
                            utiProxy.SaveLog(guarda, "1", Key, 1, _config);
                            return guarda;
                        }
                        break;

                    case "FEEINQUIRY":
                    case "REMNOVAL":
                    case "CURRENCYCONVERT":
                        var currency = ejecutarActividades(oWF.Operaciones, _config, Request, int.Parse(miUtilerias.getPropertyValue("remesador_id", mijObject)), Key);
                        utiProxy.SaveLog(currency, "1", Key, 1, _config);
                        if (oWF.ConsumeAutorizador)
                        {
                            //Consumir autorizador
                            var conAuto = auto.ConsumeAuthorizer(Request, _config, oError);
                            utiProxy.SaveLog(conAuto, "1", Key, 1, _config);
                            if (!string.IsNullOrEmpty(conAuto))
                            {
                                return conAuto;
                            }
                        }
                        if (oWF.ConsumeProxy)
                        {
                            //Consumir proxy.
                            var valProx = prox.ConsumeProxy(Request, Key, _config);
                            utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(valProx, "Fault");
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return valProx;
                            }
                        }
                    break;
                    case "RECEIPTPRINT":
                        var recibo = miConexionBD.imprimirBoleta(_config, miUtilerias.getPropertyValue("reprint-receipt-request.mtcn", mijObject),
                            miUtilerias.getPropertyValue("reprint-receipt-request.transaction_date", mijObject),
                            miUtilerias.getPropertyValue("reprint-receipt-request.operation_type", mijObject),
                            miUtilerias.getPropertyValue("header.country_code", mijObject), ref oError);
                        utiProxy.SaveLog(recibo, "1", Key, 1, _config);
                        //return recibo;
                    break;

                    default:
                        utiProxy.SaveLog("Error en WorkFlow, no se ejecutó ninguna operación.", "1", Key, 1, _config);
                        //throw new InvalidOperationException("Tipo de operación desconocida!");
                        break;
                }
            }
            catch (Exception ex)
            {
                //responseRemesador = utiProxy.BuildResponse(ACGError.RequestIsNullOrEmpty, ex.Message, agency_code, sub_agent_user);
                //utiProxy.SaveLog(responseRemesador, "1", Key, 1, _config);
                oError = ex.Message;
            }
            responseRemesador = utiProxy.BuildResponse(ACGError.AWMError, "Ocurrió un error con la trama u obtención de Workflows", agency_code, sub_agent_user);
            utiProxy.SaveLog(responseRemesador, "1", Key, 1, _config);
            return responseRemesador;
        }

        internal JObject ejecutarActividades(List<Operacion> actividades, IConfiguration _config, string Request, int remesadorID,string Key)
        {
            Authorizer auto = new Authorizer();
            Proxy prox = new Proxy();
            UtileriasAWM miUtilerias = new UtileriasAWM();
            var miObject = JObject.Parse(Request);

            foreach (var actividad in actividades)
            {
                string oError = "";
                //Ejecutar operación.
                //var trama = prox.ConstruirTramaRemesador(_config, remesadorID, miUtilerias.getPropertyValue("header.operation_product_id", miObject), actividad.NombreOperacion, miUtilerias.getPropertyValue("header.country_code", miObject), miObject);
                if (actividad.actConsumeAutorizador)
                {
                    //Consumir autorizador
                    auto.ConsumeAuthorizer(Request, _config, oError);
                    if (!string.IsNullOrEmpty(oError))
                    {
                        break;
                    }
                }
                if (actividad.actConsumeProxy)
                {
                    //Consumir proxy.
                    var valProx = prox.ConsumeProxy(Request, Key, _config);
                    utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                    var validar = miUtilerias.getPropertyValue("Fault", valProx);
                    if (!string.IsNullOrEmpty(validar))
                    {
                        var responseError = utiProxy.BuildResponse(ACGError.RequestIsNullOrEmpty, "Error!", agency_code, sub_agent_user);
                        miUtilerias.SaveLog(responseError, "1", Key, 1, _config);
                        return responseError;
                        //return valProx;
                    }
                    
                }
            }
            return miObject;
        }
    }
}





//Comentarios a borrar después de revisión y listo para empezar pruebas.


//Consumir proxy de actividades (temporal, por borrar).
//var valProx = trama;
//if (string.IsNullOrEmpty(valProx.ToString()))
//{
//    throw new Exception();
//    //break;
//}
//if (valProx is XDocument || valProx is XElement)
//{
//    var jSON = JsonConvert.SerializeObject(valProx.Descendants(actividad.NombreOperacion.Replace("request", "reply")));//Aquí serializo del XML a JSON
//    miObject.Add(new JProperty(jSON, new JObject()));//Aquí añado el jSON como nodo nuevo al orignial en miObject
//}
//else if (valProx is JObject)
//{
//    miObject.Add(new JProperty(valProx, new JObject()));//Aquí añado el jSON como nodo nuevo al orignial en miObject
//    //Si este viene como un jObject
//}

//En el PROXY
//var responseError = utiProxy.BuildResponse(ACGError.RequestIsNullOrEmpty, "No se obtuvo respuesta del Proxy", agency_code, sub_agent_user);
//miUtilerias.SaveLog(valProx, "1", Key, 1, _config);
//return responseError;
//var responseError = utiProxy.BuildResponse(ACGError.RequestIsNullOrEmpty, "No se obtuvo respuesta del Proxy", agency_code, sub_agent_user);
//miUtilerias.SaveLog(responseError, "1", Key, 1, _config);
//return responseError;
