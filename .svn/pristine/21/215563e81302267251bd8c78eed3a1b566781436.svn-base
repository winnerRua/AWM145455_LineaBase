using GrupoCoen.Corporativo.Libraries.ConexionBD;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using WSREGAWM.Entities;
using WSREGAWM.Helpers;
using WSREGAWM.Services;
using WSREGPROXY.Helpers;
using WSREGPROXY;
using System.Data;
using WSREGPROXY.Entities;
using WSREGPROXY.Services;
using WSSoapProxy.Models;
using System.Xml.Linq;
using Newtonsoft.Json;
using System.Net;
using System.IO;

namespace WSREGAWM
{
    public class AWMCore
    {
        UtileriasProxy utiProxy = new UtileriasProxy();
        Transacciones transaccion = new Transacciones();

        dynamic responseRemesador;
        WorkFlows oWF = new WorkFlows();
        string agency_code = string.Empty;
        string sub_agent_user = string.Empty;
        string oError;

        public dynamic beginWorkflow(string Request, IConfiguration _config, string Key)
        {
            try
            {
                string tokenSGR = "";
                string oRespuesta = "";
                int oSGR = -1;
                bool country = false;
                string respuesta = string.Empty, request = string.Empty;
                UtileriasAWM miUtilerias = new UtileriasAWM();
                ConexionBDAWM miConexionBD = new ConexionBDAWM();
                Proxy prox = new Proxy();

                var mijObject = JObject.Parse(Request);
                var CodigoAgencia = miUtilerias.getPropertyValue("header.agency_code", mijObject);
                var Producto = miUtilerias.getPropertyValue("header.operation_product_id", mijObject);

                if (!string.IsNullOrEmpty(CodigoAgencia))
                {
                    var valoresAgencia = JsonConvert.SerializeObject(miUtilerias.ObtenerValoresAgencia(_config, CodigoAgencia, Producto));
                    mijObject.Add(new JProperty(valoresAgencia, new JObject())); // ingresar datos en nodo header
                }

                oWF = miConexionBD.obtenerWorkFlow(_config, miUtilerias.encontrarValorNodo(mijObject, "operation_id"), Producto, int.Parse(miUtilerias.encontrarValorNodo(mijObject, "remesador_id")));
                utiProxy.SaveLog(oWF.NombreWorkFlow, "1", Key, 1, _config);

                switch (oWF.NombreWorkFlow)
                {
                    case "SENDMONEY":
                        var send = ejecutarActividades(oWF.Operaciones, _config, Request, int.Parse(miUtilerias.encontrarValorNodo(mijObject, "remesador_id")), Key);
                        utiProxy.SaveLog(send, "1", Key, 1, _config);

                        if (oWF.ConsumeAutorizador)
                        {
                            //Consumir autorizador
                            var conAuto = miUtilerias.autorizadorRest(Request, Key, _config);
                            utiProxy.SaveLog(conAuto, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(conAuto, "Fault");//Debería ser igual ya que autorizador devuelve un JSON.
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return conAuto;
                            }
                        }

                        if (oWF.ConsumeProxy)
                        {
                            //Consumir proxy.
                            var valProx = prox.ConsumeProxy(Request, Key, _config);
                            utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(valProx, "Fault");
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return valProx;
                            }
                        }
                        if (oWF.GuardaTransaccion)
                        {
                            string tipo = "ENVIO";
                            var ENVIO = miUtilerias.tipoTrans(Request, tipo);
                            var trans = transaccion.storeSendMoney(1, ENVIO, _config, oWF.GuardaTransaccion, Key);
                            utiProxy.SaveLog(Convert.ToString(trans), "1", Key, 1, _config);
                            return trans;
                        }

                        if (oWF.ValidaSGR)
                        {

                            string oMensaje = "";
                            country = mvalidateCountry(Request, "VSM", _config);

                            if (new UtileriasAWM().getAppSettingsKey("SGR_ProcessTransaction", _config) == "true" && country)
                            {
                                //ojo: sacar pais ID para mandar al sgr

                                int paisID = new ConexionBD().get_paisID(_config, new UtileriasAWM().getPropertyValue("header.country_code", JObject.Parse(Request)), ref oError);
                                oSGR = mValidateSGR(_config, Request, paisID, Key, ref oError, ref oMensaje, ref tokenSGR, oRespuesta);
                                if (oSGR == -1)
                                {
                                    if (new UtileriasAWM().getAppSettingsKey("SGR_DenyTransaction", _config) == "true")
                                    {

                                        oMensaje = new UtileriasAWM().getAppSettingsKey("SGR_ErrorCode", _config) + " " + oMensaje;
                                        //oRespuesta = GetError(oMensaje, oOwner);
                                        throw new Exception(oMensaje);
                                    }
                                    else
                                    {
                                        oError = "";
                                    }
                                }
                            }

                        }
                        if (oWF.AlmacenaSGR)
                        {
                            //-- Validamos el producto SyR
                            string oProducto = new UtileriasAWM().getPropertyValue("header.operation_product_id", JObject.Parse(Request));
                            bool valProducto = true;
                            //oProducto.Equals(new UtileriasAWM().getAppSettingsKey("KeySYR",_config) )? (oSnF.rq_status.Equals("RELEASE") ? true : false) : true;

                            if (new UtileriasAWM().getAppSettingsKey("SGR_ProcessTransaction", _config) == "true" && country && valProducto)
                            {
                                //if (token != "ERROR")
                                //{
                                string oErrorSGR = "";
                                string oMensajeSGR = "";
                                int paisID = new ConexionBD().get_paisID(_config, new UtileriasAWM().getPropertyValue("header.country_code", JObject.Parse(Request)), ref oError);
                                oSGR = mStoreSGR(_config, Request, oRespuesta, paisID, Key, ref oErrorSGR, ref oMensajeSGR, tokenSGR);
                                if (oSGR == -1)
                                {
                                    //oRespuesta = mError(oMensaje, oOwner);
                                    //throw new Exception(oMensaje);
                                }
                                //}
                            }
                        }
                        break;

                    case "PAYMONEY":
                        var pay = ejecutarActividades(oWF.Operaciones, _config, Request, int.Parse(miUtilerias.encontrarValorNodo(mijObject, "remesador_id")), Key);
                        utiProxy.SaveLog(pay, "1", Key, 1, _config);
                        if (oWF.ConsumeAutorizador)
                        {
                            //Consumir autorizador
                            var conAuto = miUtilerias.autorizadorRest(Request, Key, _config);
                            utiProxy.SaveLog(conAuto, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(conAuto, "Fault");//Debería ser igual ya que autorizador devuelve un JSON.
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return conAuto;
                            }
                        }
                        if (oWF.ConsumeProxy)
                        {
                            //Consumir proxy.
                            var valProx = prox.ConsumeProxy(Request, Key, _config);
                            utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(valProx, "Fault");
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return valProx;
                            }
                        }
                        if (oWF.GuardaTransaccion)
                        {
                            string tipo = "PAGO";
                            var PAGO = miUtilerias.tipoTrans(Request, tipo);
                            var guarda = transaccion.storePayMoney(1, PAGO, _config, oWF.GuardaTransaccion, Key);
                            utiProxy.SaveLog(guarda, "1", Key, 1, _config);
                            return guarda;
                        }
                        break;

                    case "FEEINQUIRY":
                        var feeInquiry = ejecutarActividades(oWF.Operaciones, _config, Request, int.Parse(miUtilerias.getPropertyValue("header.remesador_id", mijObject)), Key);
                        utiProxy.SaveLog(feeInquiry, "1", Key, 1, _config);
                        if (oWF.ConsumeAutorizador)
                        {
                            //Consumir autorizador
                            var conAuto = miUtilerias.autorizadorRest(Request, Key, _config);
                            utiProxy.SaveLog(conAuto, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(conAuto, "Fault");//Debería ser igual ya que autorizador devuelve un JSON.
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return conAuto;
                            }
                        }
                        if (oWF.ConsumeProxy)
                        {
                            //Consumir proxy.
                            var valProx = prox.ConsumeProxy(Request, Key, _config);
                            utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(valProx, "Fault");
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return valProx;
                            }
                        }

                        oRespuesta = miUtilerias.mEnvioProxy(oTramaWU, oServicio, oOwner, ref oError, logkey);
                        //oRespuesta = "<?xml version=\"1.0\" encoding=\"utf-8\"?><soapenv:Envelope xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><soapenv:Body><xrsi:receive-money-search-reply xmlns:xrsi=\"http://www.westernunion.com/schema/xrsi\"><instant_notification><addl_service_charges /></instant_notification><payment_transactions><payment_transaction><sender><name name_type=\"D\"><first_name>LYRIS</first_name><last_name>MICHELLE</last_name></name><address><city>LODI</city><state>NJ</state><country_code><iso_code><country_code/><currency_code/></iso_code></country_code><state_zip>07644</state_zip><street>DECCAN ROAD</street></address><contact_phone>6305525252</contact_phone><mobile_phone><phone_number /></mobile_phone><mobile_details /></sender><receiver><name name_type=\"D\"><first_name>HECTOR</first_name><last_name>SILVA</last_name></name><address><country_code><iso_code /></country_code></address><preferred_customer><account_nbr /></preferred_customer><mobile_phone><phone_number><national_number>8975658194</national_number></phone_number></mobile_phone><mobile_details><number>8975658194</number></mobile_details></receiver><financials><taxes><tax_worksheet /></taxes><gross_total_amount>25800</gross_total_amount><pay_amount>25000</pay_amount><principal_amount>25000</principal_amount><charges>800</charges></financials><payment_details><expected_payout_location><state_code /><city /></expected_payout_location><destination_country_currency><iso_code><country_code>NI</country_code><currency_code>USD</currency_code></iso_code></destination_country_currency><originating_country_currency><iso_code><country_code>US</country_code><currency_code>USD</currency_code></iso_code></originating_country_currency><originating_city>CAMP HILLPA1</originating_city><transaction_type>WMF</transaction_type><exchange_rate>1.0000</exchange_rate><original_destination_country_currency><iso_code><country_code>NI</country_code><currency_code>USD</currency_code></iso_code></original_destination_country_currency></payment_details><filing_date>08-03-16 </filing_date><filing_time>0557A EDT</filing_time><money_transfer_key>1585725697</money_transfer_key><pay_status_description>W/C</pay_status_description><mtcn>4930645050</mtcn><new_mtcn>1621684930645050</new_mtcn><fusion><fusion_status>W/C</fusion_status><account_number /></fusion><wu_network_agent_indicator /></payment_transaction></payment_transactions><delivery_services><messsagesms><msmsservice>N</msmsservice><msmsservice_charges>0</msmsservice_charges><msmsservice_tax>0</msmsservice_tax></messsagesms></delivery_services><misc_buffer /></xrsi:receive-money-search-reply></soapenv:Body></soapenv:Envelope>";

                        //se inserta el paquete en la actividad Complete
                        if (oServicio.Equals(Service.fee_inquiry_request))
                        {
                            string oMoneda = "";
                            XDocument oDoc = XDocument.Parse(oTramaWU);
                            var qMoneda = (from c in oDoc.Descendants("payment_details").Descendants("originating_country_currency").Descendants("iso_code")
                                           select new
                                           {
                                               oMoneda = c.Element("currency_code").Value.ToString()
                                           }).Single();

                            oMoneda = qMoneda.oMoneda;

                            oRespuesta = miUtilerias.mCalculoIVA(oRespuesta, oTrama, oPais, oMoneda, logkey, ref oError);

                            //Calculo de cargos SMS
                            oRespuesta = AddSMSCharges(oRespuesta, oTrama, oPais, oMoneda, ref oError, oProducto, oOwner, oAgencia, logkey, "E");
                        }
                        break;
                    case "REMNOVAL":
                    case "CURRENCYCONVERT":
                        var currency = ejecutarActividades(oWF.Operaciones, _config, Request, int.Parse(miUtilerias.getPropertyValue("header.remesador_id", mijObject)), Key);
                        utiProxy.SaveLog(currency, "1", Key, 1, _config);
                        if (oWF.ConsumeAutorizador)
                        {
                            //Consumir autorizador
                            var conAuto = miUtilerias.autorizadorRest(Request, Key, _config);
                            utiProxy.SaveLog(conAuto, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(conAuto, "Fault");//Debería ser igual ya que autorizador devuelve un JSON.
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return conAuto;
                            }
                        }
                        if (oWF.ConsumeProxy)
                        {
                            //Consumir proxy.
                            var valProx = prox.ConsumeProxy(Request, Key, _config);
                            utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                            var validar = miUtilerias.encontrarValorNodo(valProx, "Fault");
                            if (!string.IsNullOrEmpty(validar))
                            {
                                return valProx;
                            }
                        }
                        break;
                    case "RECEIPTPRINT":
                        var recibo = miConexionBD.imprimirBoleta(_config, miUtilerias.getPropertyValue("reprint-receipt-request.mtcn", mijObject),
                            miUtilerias.getPropertyValue("reprint-receipt-request.transaction_date", mijObject),
                            miUtilerias.getPropertyValue("reprint-receipt-request.operation_type", mijObject),
                            miUtilerias.getPropertyValue("header.country_code", mijObject), ref oError);
                        utiProxy.SaveLog(recibo, "1", Key, 1, _config);
                        //return recibo;
                        break;

                    default:
                        utiProxy.SaveLog("Error en WorkFlow, no se ejecutó ninguna operación.", "1", Key, 1, _config);
                        //throw new InvalidOperationException("Tipo de operación desconocida!");
                        break;
                }
            }
            catch (Exception ex)
            {
                oError = ex.Message;
            }
            responseRemesador = utiProxy.BuildResponse(ACGError.AWMError, "Ocurrió un error con la trama u obtención de Workflows", agency_code, sub_agent_user);
            utiProxy.SaveLog(responseRemesador, "1", Key, 1, _config);
            return responseRemesador;
        }

        internal JObject ejecutarActividades(List<Operacion> actividades, IConfiguration _config, string Request, int remesadorID, string Key)
        {
            //Authorizer auto = new Authorizer();
            Proxy prox = new Proxy();
            UtileriasAWM miUtilerias = new UtileriasAWM();
            var miObject = JObject.Parse(Request);

            foreach (var actividad in actividades)
            {
                string oError = "";
                //Ejecutar operación.
                if (actividad.actConsumeAutorizador)
                {
                    //Consumir autorizador
                    //Consumir autorizador
                    var conAuto = miUtilerias.autorizadorRest(Request, Key, _config);
                    utiProxy.SaveLog(conAuto, "1", Key, 1, _config);
                    var validar = miUtilerias.encontrarValorNodo(conAuto, "Fault");//Debería ser igual ya que autorizador devuelve un JSON.
                    if (!string.IsNullOrEmpty(validar))
                    {
                        return conAuto;
                    }
                }
                if (actividad.actConsumeProxy)
                {
                    //Consumir proxy.
                    var valProx = prox.ConsumeProxy(Request, Key, _config);
                    utiProxy.SaveLog(valProx, "1", Key, 1, _config);
                    var validar = miUtilerias.getPropertyValue("Fault", valProx);
                    if (!string.IsNullOrEmpty(validar))
                    {
                        var responseError = utiProxy.BuildResponse(ACGError.RequestIsNullOrEmpty, "Error!", agency_code, sub_agent_user);
                        miUtilerias.SaveLog(responseError, "1", Key, 1, _config);
                        return responseError;
                        //return valProx;
                    }

                }
            }
            return miObject;
        }
        private int mValidateSGR(IConfiguration config, string trama, int oPais, string logkey, ref string oError, ref string oMensaje, ref string token, string tramaRespuesta = "")
        {
            int oRespuesta = -1;
            string oidDoc = "";
            string oPrimerNombre = "";
            string oPrimerAp = "";
            UtileriasAWM oAuth = new UtileriasAWM();

            try
            {

                if (string.IsNullOrEmpty(tramaRespuesta))
                {
                    if (oAuth.ValidateSGR(config, trama, oPais, "VSM", logkey, ref oMensaje, ref token))
                    {
                        oRespuesta = 1;
                    }
                }
                else
                {
                    if (oAuth.ValidateSGR(config, trama, oPais, "VSM_V", logkey, ref oMensaje, ref token, tramaRespuesta))
                    {
                        oRespuesta = 1;
                    }
                }
            }
            catch (Exception oex)
            {
                oError = oex.Message;
            }

            return oRespuesta;
        }
        /// <summary>
        /// Clase que maneja la persistencia en del SGR, si tiene exito, devuelve 1, si no devuelve -1. 
        /// </summary>
        /// <param name="ocliente">clase que trae los parametros para realizar la validacion del cliente</param>
        /// <param name="oPais">id que indica el país de donde procede la operación </param>
        /// <param name="oError">string de referencia que indica si ocurrió algun error en el transcurso de la operación</param>
        /// <param name="oMensaje">String que indica la lista de errores por lo que no fue validado el cliente</param>
        /// <returns> entero que indica el id del cliente, si no existe devuelve 0, error devuelve -1</returns>
        private int mStoreSGR(IConfiguration config, string trama, string sRespuesta, int oPais, string logkey, ref string oError, ref string oMensaje, string token)
        {
            int oRespuesta = 1;
            string oidDoc = "";
            string oPrimerNombre = "";
            string oPrimerAp = "";
            UtileriasAWM oAuth = new UtileriasAWM();

            try
            {
                //idpais viene por referencia. Es el pais desde donde se hace la transacción 


                oAuth.StoreSGR(config, trama, sRespuesta, "SSM", oPais, logkey, token);
            }
            catch (Exception oex)
            {
                oError = oex.Message;
                oRespuesta = -1;
            }

            return oRespuesta;
        }

        public bool mvalidateCountry(string trama, string type, IConfiguration config)
        {
            string IsoCountry = "";
            bool Country = false;

            UtileriasAWM util = new UtileriasAWM();
            IsoCountry = util.getIsoCountryValidation(trama, type);
            Country = util.validateCountry(IsoCountry, config);

            return Country;
        }



    }
}